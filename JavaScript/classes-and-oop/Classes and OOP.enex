<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE en-export SYSTEM "http://xml.evernote.com/pub/evernote-export4.dtd">
<en-export export-date="20240703T125226Z" application="Evernote" version="10.94.3">
  <note>
    <title>Classes and OOP</title>
    <created>20240703T110924Z</created>
    <updated>20240703T125028Z</updated>
    <note-attributes>
      <author>surajgoraicse@gmail.com</author>
    </note-attributes>
    <content>
      <![CDATA[<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!DOCTYPE en-note SYSTEM "http://xml.evernote.com/pub/enml2.dtd"><en-note><div><b><span style="font-size: 24px;"><span style="color:rgb(252, 18, 51);--inversion-type-color:simple;">Content:</span></span></b></div><ol><li><div><b><span style="font-size: 18px;">Object and Object Constructor.</span></b></div></li><ol><li><div><b><span style="font-size: 15px;"><span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">Objects</span></span></b></div></li><li><div><b><span style="font-size: 15px;"><span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">Why do we need object constructor function.</span></span></b></div></li><li><div><b><span style="font-size: 15px;"><span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">Creating Constructor Function.</span></span></b></div></li><li><div><b><span style="font-size: 15px;"><span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">Working of constructor function.</span></span></b></div></li><li><div><b><span style="font-size: 15px;"><span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">Return from constructor.</span></span></b></div></li><li><div><b><span style="font-size: 15px;"><span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">Adding a property or method to the constructor.</span></span></b></div></li><li><div><b><span style="font-size: 15px;"><span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">Built-in JS constructors.</span></span></b></div></li></ol><li><div><br/></div></li></ol><div><b><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></b></div><div><b><span style="font-size: 18px;">______________________________________________________________________________________</span></b></div><div style="text-align:center;"><b><span style="font-size: 24px;"><span style="color:rgb(251, 95, 44);--inversion-type-color:simple;"><u>1. Object and Object Constructors :</u></span></span></b></div><div><br/></div><div><code><b><span style="font-size: 20px;">Object:</span></b></code></div><div><span style="font-size: 18px;">An object is a collection of <span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">properties</span>, and a property is a<span style="color:rgb(229, 158, 37);--inversion-type-color:simple;"> key - value pair</span>. A property's value can be a <span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">function</span>, in which case the property is known as a <span style="color:rgb(229, 158, 37);--inversion-type-color:simple;">method</span>.</span></div><div><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></div><div><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></div><div><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></div><div><code><b><span style="font-size: 20px;">Why do we need Object Constructor function ?</span></b></code></div><div><span style="font-size: 18px;">The regular </span><code><span style="font-size: 18px;">{...}</span></code><span style="font-size: 18px;"> syntax allows us to create one object. But often we need to create many similar objects, like multiple users or menu items and so on.</span></div><div><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></div><div><span style="font-size: 18px;">That can be done using constructor functions and the </span><code><span style="font-size: 18px;">"new"</span></code><span style="font-size: 18px;"> operator.</span></div><div><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></div><div><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></div><h2 style="--en-nodeId:b7f61750-2881-4cae-a26b-70418be5aa09;text-align:start;"><code><b><span style="font-size: 20px;">Creating Constructor function:</span></b></code></h2><div style="text-align:start;"><span style="font-size: 18px;">Constructor functions technically are regular functions. There are two conventions though they follow:</span></div><div><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></div><ol><li><div><span style="font-size: 16px;">They are named with </span><code><span style="font-size: 16px;">capital letter</span></code><span style="font-size: 18px;"> </span><span style="font-size: 16px;">first.</span></div></li><li><div><span style="font-size: 16px;">They should be executed only with </span><code><span style="font-size: 16px;">"new"</span></code><span style="font-size: 16px;"> operator.</span></div></li></ol><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div><div style="--en-codeblock:true; --en-syntaxLanguage:javascript; --en-lineWrapping:false;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>// Creating construtor function.</div><div>function Person(first, last, age, eyecolor) {</div><div>  this.firstName = first;</div><div>  this.lastName = last;</div><div>  this.age = age;</div><div>  this.eyeColor = eyecolor;</div><div><br/></div><div>//Default value  ( default value for all objects created by the constructor. )</div><div>  this.nationality = "Indian";</div><div>    </div><div>// Method inside object </div><div>  this.fullName = function() {            </div><div>    return this.firstName + " " + this.lastName;</div><div><br/></div><div>  };</div><div>}</div><div><br/></div><div>//Creating objects using new keyword.</div><div><br/></div><div>const myFather = new Person("John", "Doe", 50, "blue");</div><div>const myMother = new Person("Sally", "Rally", 48, "green");</div><div>const mySister = new Person("Anna", "Rally", 18, "green");</div><div><br/></div><div>//Printing created objects.</div><div><br/></div><div>console.log(myFather)</div><div>console.log(myMother)</div><div>console.log(myMother.fullName());                // object calling method</div><div><br/></div></div><div><br/></div><h2 style="--en-nodeId:b118a12d-dcec-4b5e-97a6-5499479df6d8;text-align:start;"><code><b><span style="font-size: 18px;">Working of Constructor Function:</span></b></code></h2><h2 style="--en-nodeId:2b14efda-8453-44fb-8a48-b50654cea84d;text-align:start;"><span style="font-size: 16px;">When a function is executed with </span><code><span style="font-size: 16px;">new</span></code><span style="font-size: 16px;">, it does the following steps:</span></h2><ol><li><div><span style="font-size: 16px;">A new empty object is created and assigned to </span><code><span style="font-size: 16px;">this</span></code><span style="font-size: 16px;">.</span></div></li><li><div><span style="font-size: 16px;">The function body executes. Usually it modifies </span><code><span style="font-size: 16px;">this</span></code><span style="font-size: 16px;">, adds new properties to it.</span></div></li><li><div><span style="font-size: 16px;">The value of </span><code><span style="font-size: 16px;">this</span></code><span style="font-size: 16px;"> is returned.</span></div></li></ol><div style="--en-codeblock:true; --en-lineWrapping:false;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>function User(name) {</div><div>  // this = {};  (creates implicitly)</div><div><br/></div><div>  // add properties to this</div><div>  this.name = name;</div><div>  this.isAdmin = false;</div><div><br/></div><div>  // return this;  (returns implicitly and it can be returned explictly too.)</div><div>}</div></div><h2 style="--en-nodeId:d3cb079a-114a-4c5c-ab6e-5b0ae7dbd197;text-align:start;"><code><b><span style="font-size: 18px;">Return from Constructor:</span></b></code></h2><div><b><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></b></div><div style="text-align:start;"><span style="font-size: 16px;">Usually, constructors do not have a </span><code><span style="font-size: 16px;">return</span></code><span style="font-size: 16px;"> statement. Their task is to write all necessary stuff into </span><code><span style="font-size: 16px;">this</span></code><span style="font-size: 16px;">, and it implicitly returns it.</span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div><div style="text-align:start;"><span style="font-size: 16px;">But if there is a </span><code><span style="font-size: 16px;">return</span></code><span style="font-size: 16px;"> statement, then the rule is simple:</span></div><ul><li><div><span style="font-size: 15px;">If </span><code><span style="font-size: 15px;">return</span></code><span style="font-size: 15px;"> is called with an object, then the object is returned instead of </span><code><span style="font-size: 15px;">this</span></code><span style="font-size: 15px;">.</span></div></li><li><div><span style="font-size: 15px;">If </span><code><span style="font-size: 15px;">return</span></code><span style="font-size: 15px;"> is called with a primitive, it’s ignored.</span></div></li></ul><div style="text-align:start;margin-bottom:12px;"><span style="font-size: 16px;">In other words, </span><code><span style="font-size: 16px;">return</span></code><span style="font-size: 16px;"> with an object returns that object, in all other cases </span><code><span style="font-size: 16px;">this</span></code><span style="font-size: 16px;"> is returned.</span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div><div><span style="font-size: 16px;"><span style="--en-markholder:true;"><br/></span></span></div><div>For instance, here <code>return</code> overrides <code>this</code> by returning an object:</div><div style="--en-codeblock:true; --en-lineWrapping:false;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>function BigUser() {</div><div>  this.name = "John";</div><div>  return { name: "Godzilla" };  // &lt;-- returns this object</div><div>}</div><div>alert( new BigUser().name );  // Godzilla, got that object</div></div><div><br/></div><div>And here’s an example with an empty <code>return</code> (or we could place a primitive after it, doesn’t matter):</div><div style="--en-codeblock:true; --en-lineWrapping:false;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>function SmallUser() {</div><div>  this.name = "John";</div><div>  return; // &lt;-- returns this</div><div>}</div><div>alert( new SmallUser().name );  // John</div></div><div><br/></div><div><br/></div><div><br/></div><h2 style="--en-nodeId:cb25c46d-d9a1-41c3-9cfc-68fb02c98c98;text-align:start;"><code><b><span style="font-size: 18px;">Adding a property or a method to the constructor:</span></b></code></h2><div><b><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></b></div><div><span style="font-size: 18px;">To add a new property, it must be added to the constructor function prototype.</span></div><div style="--en-codeblock:true; --en-lineWrapping:false;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>// Right syntax</div><div>Person.prototype.nationality = "English";</div><div>Person.prototype.changeName = function (name) {</div><div>  this.lastName = name;</div><div>}</div><div><br/></div><div><br/></div><div>// These are wrong syntax</div><div>Person.nationality = "English";</div><div>Person.changeName = function (name) {</div><div>  this.lastName = name;</div><div>}</div></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><div><br/></div><h2 style="--en-nodeId:c217ba0e-acdd-45ad-a91e-a1348d9ea0e7;text-align:start;"><code><b><span style="font-size: 18px;">Built-in JavaScript Constructor:</span></b></code></h2><div><b><span style="font-size: 18px;"><span style="--en-markholder:true;"><br/></span></span></b></div><div style="--en-codeblock:true; --en-lineWrapping:false;box-sizing: border-box; padding: 8px; font-family: Monaco, Menlo, Consolas, &quot;Courier New&quot;, monospace; font-size: 12px; color: rgb(51, 51, 51); border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; background-color: rgb(251, 250, 248); border: 1px solid rgba(0, 0, 0, 0.14902); background-position: initial initial; background-repeat: initial initial;"><div>new Object()   // A new Object object</div><div>new Array()    // A new Array object</div><div>new Map()      // A new Map object</div><div>new Set()      // A new Set object</div><div>new Date()     // A new Date object</div><div>new RegExp()   // A new RegExp object</div><div>new Function() // A new Function object</div></div><div><br/></div></en-note>      ]]>
    </content>
  </note>
</en-export>
